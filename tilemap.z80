; Draw a tilemap to the screen
; What it does:
;	0. Center the map around the player's coordinates
;	1. Find our position in the gbuf and in our tilemap
;	2. Draw a row of the tilemap sprite by sprite
;	3. Loop until all rows have been drawn
drawMap:
	call isPlayerLeftEdge
	 jr nc, drawMapCheckRightEdge
		ld hl, 0
		ld (mapX), hl
		jr drawMapCheckTop
drawMapCheckRightEdge:
	call isPlayerRightEdge
	 jr nc, drawMapCenterX
		ld a, (mapW)
		sub SCREEN_WIDTH
		ld h, a
		ld l, 0
		ld (mapX), hl
		jr drawMapCheckTop
drawMapCenterX:
	ld hl, (playerX)
	ld bc, (SCREEN_WIDTH * ONE_TILE) / 2 - (4 * ONE_PIXEL)
	sbc hl, bc
	ld (mapX), hl
drawMapCheckTop:
	call isPlayerTopEdge
	 jr nc, drawMapCheckBottomEdge
		ld hl, 0
		ld (mapY), hl
		jr drawMapStart
drawMapCheckBottomEdge:
	call isPlayerBottomEdge
	 jr nc, drawMapCenterY
		ld a, (mapH)
		sub SCREEN_ROWS / 8
		ld h, a
		ld l, 0
		ld (mapY), hl
		jr drawMapStart
drawMapCenterY:
	ld hl, (playerY)
	ld bc, (SCREEN_ROWS * ONE_PIXEL) / 2 - (PLAYER_HEIGHT / 2 * ONE_PIXEL)
	sbc hl, bc
	ld (mapY), hl
drawMapStart:
	ld hl, mapX + 1			; MSB of mapX, this byte will be byte-aligned
	ld c, (hl)				;
	ld b, 0					; bc = mapX
	inc hl					; skip to MSB of mapY
	inc hl					; 
	ld e, (hl)				; e = mapY
	inc hl					; &mapW
	ld h, (hl)				; h = mapW
	call multEH				; hl = mapW * mapY
	ld de, (mapPtr)
	add hl, de
	add hl, bc				; hl = map + x offset
	ex de, hl				; de = starting position in tilemap
	ld hl, gbuf
	ld c, GBUF_ROWS / 8		; number of sprites per column

drawMapRow:
	ld b, GBUF_WIDTH		; number of sprites per row

; This inner loop is run hundreds of times per frame, so we want it to be
; as fast as possible.
drawMapSprite:
	push hl					; hl = gbuf position
	push de					; de = position in tilemap
	push bc					; b = num sprites per row
		ld c, l				; save hl
		ld b, h				; bc = gbuf position
; find the address of the sprite from its ID
		ld a, (de)			; get sprite number
		ld l, a
		ld h, 0
		add hl, hl			; * 2
		add hl, hl			; * 4
		add hl, hl			; hl * 8
		ld de, tileData		;
		add hl, de			; hl = sprite pointer
		ex de, hl			; de = sprite pointer
		ld l, c				; restore hl
		ld h, b				; hl = position in gbuf
		ld bc, GBUF_WIDTH
; copy from sprite data to gbuf
		ld a, (de)			; 1: sprite byte
		ld (hl), a			; store in gbuf
		add hl, bc			; next row of gbuf
		inc de				; next row in sprite
		ld a, (de)			; 2
		ld (hl), a			;
		add hl, bc			;
		inc de				;
		ld a, (de)			; 3
		ld (hl), a			;
		add hl, bc			;
		inc de				;
		ld a, (de)			; 4
		ld (hl), a			;
		add hl, bc			;
		inc de				;
		ld a, (de)			; 5
		ld (hl), a			;
		add hl, bc			;
		inc de				;
		ld a, (de)			; 6
		ld (hl), a			;
		add hl, bc			;
		inc de				;
		ld a, (de)			; 7
		ld (hl), a			;
		add hl, bc			;
		inc de				;
		ld a, (de)			; 8
		ld (hl), a			;
	pop bc					; b = current column in row of tilemap sprites
	pop de					; de = position in tilemap
	pop hl					; hl = position of gbuf
	inc hl					; next column of gbuf
	inc de					; next tile in tilemap
	djnz drawMapSprite
; update gbuf and tilemap pointers to go to next row
	push bc
		ld c, GBUF_WIDTH * 7	; we've drawn one row, hl is pointing to 2nd row of
		add hl, bc			; we need to move down 7 more rows (each tile is 8x8)
		ex de,hl			; hl = position in tilemap
		ld a, (mapW)		; now we need to jump down to the next row in our
		sub GBUF_WIDTH		; .. tilemap.
		ld c, a
		add hl, bc
		ex de,hl			; hl = gbuf position, de = tilemap position
	pop bc
	dec c
	 jp nz, drawMapRow
	ret

; Check if a tile can be passed or not
; We first check if the player's body (8 pixels) is in the same tile as the player's
; head (4 pixels). If not, we need to check one tile lower. Then we get the position
; in the map by multiplying the map width by the y value and then adding that to the
; start of the map data and then adding the x value. Then we test if that tile is a
; passable tile or not. If it isn't, we can't advance and just quit the routine. If
; it is a passable tile, we check if the player's body straddles more than one tile
; or not. If it is, we check the tile below as well.
;
; c = X value on map to check
checkTilePassX:
	ld hl, (playerY)
	ld a, l
	and %11100000
	cp 4 * ONE_PIXEL		; the top 4 pixels of the player don't block you from walking on a tile
	 jr c, $ + 3
		inc h
	ld de, (mapW)
	call multEH				; [math.z80] hl = mapY * mapW, b = 0
	ld de, (mapPtr)
	add hl, de				; map start + y offset
	add hl, bc				; the position to check in the map
	ex af, af'				; - save playerY -
		ld a, (hl)			; the tile to check
		or a				; check if the tile is passable (currently only 0 is passable)
		 ret nz				; no need to continue checking if the top tile isn't passable
	ex af, af'				; - restore playerY -
	cp 4 * ONE_PIXEL		; if the head is at pixel 4, the body starts at pixel 8 and thus is aligned
	 ret z					; .. so we only need to test one tile
	ld de, (mapW)			; otherwise, move down to the next row in the map
	ld d, b					; clear out d (b was reset in multEH)
	add hl, de				; get the new map position
	ld a, (hl)				; grab the tile id
	or a					; check if it's passable
	ret

; h = Y value on map to check
checkTilePassY:
	ld bc, (playerX)
	ld c, b
	ld de, (mapW)
	call multEH				; [math.z80] hl = mapY * mapW, b = 0
	ld de, (mapPtr)
	add hl, de				; map start + y offset
	add hl, bc				; the position to check in the map
	ld a, (hl)				; the tile to check
	or a					; check if the tile is passable (currently only 0 is passable)
	 ret nz					; no need to continue checking if the top tile isn't passable
	ld a, (playerX)			; check if the player is covering one or two tiles
	and %11100000			; clear out fraction
	or a					; if x = 0, the player is aligned
	 ret z					; .. so we only need to test one tile
	inc hl					; get the new map position
	ld a, (hl)				; grab the tile id
	or a					; check if it's passable
	ret


