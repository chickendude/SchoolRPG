.nolist
#include "ti83plus.inc"
.list

; OS equates
#define saferam		$86EC	; 768 bytes (saveSScreen)
; TODO: Perhaps switch to _InsertMem/_DeleteMem instead of using ramStart?
#define gbuf		$8000	; "ram start", ~1k bytes of scratch space
#define progStart	$9D95

; Key equates
#define GRP_ARROWS	%11111110	; arrow group ;)
#define GRP_ENTCLR	%11111101	; right column, including Enter/Clear
#define GRP_2NDDEL	%10111111	; F keys, 2nd, Mode, Del
#define DI_CLEAR	%10111111	; Clear

; Constants
#define SCREEN_ROWS		64
#define SCREEN_WIDTH	12
SCREEN_SIZE			=	SCREEN_ROWS * SCREEN_WIDTH
GBUF_WIDTH			=	SCREEN_WIDTH + 1
GBUF_ROWS			=	SCREEN_ROWS + 8
GBUF_SIZE			=	GBUF_WIDTH  * GBUF_ROWS
ONE_PIXEL			=	%00100000


; Variables
mapPtr				=	saferam
mapX				=	mapPtr + 2	; X and Y are organized like this:
mapY				=	mapX + 2	; %0000 0000 000.0 0000
mapW				=	mapY + 2
mapH				=	mapW + 1
playerX				=	mapH + 1
playerY				=	playerX + 2

.db t2ByteTok, tasmCmp
.org progStart

start:
	bcall(_ClrLCDFull)		; probably not needed anymore
	di						;
	ld hl, tilemap + 2		; save the tilemap
	ld (mapPtr), hl			;
	ld hl, (tilemap)		; get width and height of tilemap
	ld (mapW), hl			; ..and save to mapW and mapH
	ld hl, 0				;
	ld (mapX), hl			; set mapX and mapY to 0
	ld (mapY), hl			;
	ld h, 3
	ld (playerX), hl
	ld (playerY), hl
	call clearScreen		; first let's clear the gbuf

mainLoop:
	call drawMap			; draw the tilemap to the screen
	call drawPlayer
	call rotateScreen		; update the fastCopy routine to properly rotate the gbuf
	call fastCopy

; check keys
; First check if [Clear] was pressed
	ld a, GRP_ENTCLR
	call getK
	cp DI_CLEAR
	 jr z, quit

; Now check the arrow keys
	ld a, GRP_ARROWS		; if we use rra, we can test in this order: DLRU
	call getK				;
	rra						; put right-most bit into carry
	push af					; if the bit is zero, the key is pressed
		call nc, mapDown	;
	pop af					;
	rra						;
	push af					;
		call nc, moveLeft	;
	pop af					;
	rra						;
	push af					;
		call nc, moveRight	;
	pop af					;
	rra						;
	 call nc, mapUp			;
	jr mainLoop				; and repeat!

; make sure all keys have been released before testing the keys
waitReleaseKey:
	xor a
	call getK
	inc a
	 jr nz, waitReleaseKey
	call waitKey			; wait for a key press and quit
	jp quit

waitKey:
	xor a
	call getK
	inc a
	 jr z, waitKey
	ret

clearScreen:
	ld hl, gbuf
	ld de, gbuf + 1
	ld (hl), 0
	ld bc, GBUF_SIZE - 1
	ldir
	ret

quit:
	bcall(_FillBasePageTable)
	ret

; in:
;	a = group(s) to read
; out:
;	a = byte from key scan
; touches:
;	a
getK:
	push af				; a = group to read
		ld a, $FF		; clear key port
		out (1), a		;
	pop af				; a = key group
	out (1), a			; tell the calc which column(s) of the key matrix to read
	push hl				; these are just delay cycles
	pop hl				; supposedly some calcs need them to not get bogus values
	in a, (1)			; read the keys pressed into a
	ret

; draws what's in the gbuf to the LCD
fastCopy:
	di					; make sure interrupts aren't running
	ld a, $80			; first row
	out ($10), a		; tell LCD driver which row to start with
	ld hl, gbuf
	ld a, (mapY)
	ld c, GBUF_WIDTH
	call multAC3		; a = map y * gbuf width
	ld b, 0
	ld c, a
	add hl, bc
	ld a, $20			; first column
	ld c, a				; save column

; hl = position in the gbuf
; c = column we're drawing in
fastCopyCol:
	ld b, SCREEN_ROWS
	out ($10), a		; set the column
	inc c				; prepare to move to next column
	ld de, GBUF_WIDTH - 1	; because we load two bytes of the gbuf, we need to subtract one
	push hl				; = top gbuf position of column
fastCopyLoop:
		ld a, (hl)		; grab byte from gbuf
fastRotationLeft:		; thanks to the magic of SMC, we'll overwrite the following bytes with rotation instructions
		.db 0, 0, 0, 0	; .. to allow us to draw the map even when it's not byte-aligned
fastMaskLeft = $ + 1	; we also need to apply a mask so we don't draw the parts that have been rotated to the other side
		and $FF			; this also gets overwritten via SMC
		ld d, a
		inc hl
		ld a, (hl)
fastRotationRight:
		.db 0, 0, 0, 0
fastMaskRight = $ + 1
		and $FF
		or d
		out ($11), a
		ld d, 0
		add hl, de		; move to next row in gbuf
	djnz fastCopyLoop
	pop hl				; hl = top column in gbuf
	inc hl				; move to next column
	ld a, c				; check which LCD column we're in
	cp $2C				; starts at $20, so $2C is the 13th column ($20 = 1, $21 = 2
	 jp nz, fastCopyCol	; .. etc.)
	ret

rotateScreen:
	ld a, (mapX)		; we're interested in the top 3 bits
	rlca				;
	rlca				;
	rlca				;
	and $7				; clear out fraction values
	ld c, a				;
	ld b, 0				; bc = x offset (0-7) without fraction values
	cp 4				; if we are more than halfway through the sprite, it's faster to rotate right
	ld hl, rotationRight - 4
	 jr nc, $ + 5
		ld hl, rotationLeft
	add hl, bc			; hl points to the start of the rotation instructions to copy into the fastcopy routine
	push hl				; we need to save hl for the right rotation instructions
		ld de, fastRotationLeft
		ldi
		ldi
		ldi
		ldi
	pop hl
	ld de, fastRotationRight
	ldi
	ldi
	ldi
	ldi
	ld hl, rotationMask	; 
	ld c, a
	ld b, 0
	add hl, bc
	ld a, (hl)
	ld de, fastMaskLeft
	ld (de), a
	cpl
	ld de, fastMaskRight
	ld (de), a
	ret
	



; Code
; Try to keep this section pure code in case we end up crossing 8kb
#include "math.z80"
#include "player.z80"
#include "sprites.z80"
#include "tilemap.z80"

; Data
; Static data should go here. Try not to include any code past this point.

; These are the instructions that will get copied into the fast copy routine
rotationRight:
	rrca
	rrca
	rrca
	rrca
rotationLeft:
	nop
	nop
	nop
	nop
	rlca
	rlca
	rlca
	rlca

rotationMask:
	.db %11111111
	.db %11111110
	.db %11111100
	.db %11111000
	.db %11110000
	.db %11100000
	.db %11000000
	.db %10000000

tilemap:
	.db 17,20
	.db 01,01,01,01,01,01,01,00,01,02,00,00,02,01,01,01,01
	.db 01,00,00,00,00,00,00,00,00,00,00,00,02,01,01,01,01
	.db 01,00,02,00,02,00,00,00,00,00,00,00,02,00,00,00,02
	.db 01,00,00,02,00,00,00,00,00,00,00,00,02,00,00,00,02
	.db 01,00,02,00,02,00,00,00,00,00,00,00,00,00,00,00,01
	.db 01,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,01
	.db 01,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,01
	.db 01,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,02
	.db 01,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,01
	.db 01,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,01
	.db 01,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,02
	.db 01,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,01
	.db 01,02,02,02,00,00,00,00,00,00,00,00,00,00,00,00,01
	.db 01,02,02,02,00,00,00,00,00,00,00,00,00,00,00,00,02
	.db 01,02,02,02,00,00,00,00,00,00,00,00,00,00,00,00,02
	.db 01,02,02,02,00,00,00,00,00,00,00,00,00,00,00,00,02
	.db 01,02,02,02,00,00,00,00,00,00,00,00,00,00,00,00,01
	.db 01,02,02,02,00,00,00,00,00,00,00,00,00,00,00,01,01
	.db 01,02,02,02,00,00,00,00,00,00,00,00,00,00,01,01,01
	.db 01,02,02,02,00,00,00,00,00,00,00,00,00,01,01,01,01

sprites:
playerSprites:
#include "data/player_0.bmp"
#include "data/player_1.bmp"
#include "data/player_2.bmp"
#include "data/player_3.bmp"
#include "data/player_4.bmp"
#include "data/player_5.bmp"
#include "data/player_6.bmp"
#include "data/player_7.bmp"

tileData:
sprite:
	.db 0,0,0,0
	.db 0,0,0,0

sprite1:
	.db $FF
	.db %10000001
	.db %10000001
	.db %10000001
	.db %10101001
	.db %10000001
	.db %10000001
	.db $FF

sprite2:
	.db $FF
	.db %10000001
	.db %10100001
	.db %10100001
	.db %10010001
	.db %10001001
	.db %10001001
	.db $FF
