; Taken from:
; http://wikiti.brandonw.net/index.php?title=Z80_Routines:Math:Multiplication#8.2A8_multiplication
;
; Explanation:
; Binary multiplication is the same as normal decimal multiplication.
; It's actually much simpler. The basic idea is when you are multiplying
; two numbers, you go through one number bit by bit (here we use H),
; if that bit is a 1, then you add the other number (here, E). Each time
; we check a new digit, we need to shift that the result left one (i.e.
; add a zero to the end). Conveniently enough, we can do the shift and the
; bit check in one instruction by using "add hl, hl", which shifts H (our
; original value) and L (where the result will go) left and puts the left-
; most bit into the carry, which we can use to test if it was a 1 or 0.
multEH:
	ld l, 0			; clear out L and D
	ld d, l			; ..since we've got H and E loaded
	sla h			; optimised 1st iteration
	 jr nc, $ + 3
		ld l, e
	ld b, 7
multEHLoop:
		add	hl, hl
		 jr nc, $ + 3
			add	hl, de
	 djnz multEHLoop
	ret

; This just multiplies the upper 3 bits of a with C, treating those bits
; as the values 0 - 7.
; Note: C must also be 6 bits or smaller.
;
; only changes the value of a
multAC3:
	and %11100000	; clear out lower bits of a
	add a, a
	 jr nc, $ + 3
		add a, c
	add a, a
	 jr nc, $ + 3
		add a, c
	add a, a
	 jr nc, $ + 3
		add a, c
	ret

; This removes the fraction part of a number and shifts it all to the right.
;
; input:
;	de = number to convert: %0000 0000 000.0 0000 -> %---- -000 0000 0000
; output:
;	hl = converted number
removeFractionDE:
	ld a, e				; e holds the values 0.0 to 7.99...
	rlca \ rlca \ rlca	; remove the fraction
	and $7				; clean out the other bits
	ld e, a				; save the pixel offset in e
	ld l, d				;
	ld d, 0				; clear out d so we can add de to hl below
	ld h, d				; clear out h
	add hl, hl			; x2
	add hl, hl			; x4
	add hl, hl			; multiply hl by 8
	add hl, de			; add the lower 3 bits back in
	ret

